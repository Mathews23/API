"""Service for handling authentication-related operations."""


from app.models import User, UserCreate
from app.database import SessionDep
from sqlmodel import select
from fastapi import HTTPException
from passlib.hash import bcrypt

class AuthService:
    """Service class for authentication-related operations."""

    @staticmethod
    def register_user(new_user: UserCreate, session: SessionDep) -> User:
        """Register a new user.
        """
        # Validacion de datos se hace en el endpoint de registro
        # Verifica si el usuario ya existe
        email = new_user.email
        stmt = select(User).where(User.email == email)
        user = session.exec(stmt).first()
        if user:
            """If the user already exists, raise an exception."""
            raise HTTPException(status_code=409, detail="User already exists with this email.")
        else:
            """If the user does not exist, create a new user."""
            # Hash the password
            hashed_password = bcrypt.hash( new_user.password)
            # Create a new user instance
            user = User(
                id=None,  # Will be auto-generated by the database
                username=new_user.username,
                hash_password=hashed_password,
                email=email,
                is_active=True,  # Default value indicating the user is active
                role="viewer"  # Default role indicating the user has view permissions
            )
            # Insert the new user into the database
            session.add(user)
            session.commit()
            session.refresh(user)
        return user
           

    @staticmethod
    def authenticate_user(email: str, password: str, session: SessionDep) -> User | None:
        """Authenticate an existing user."""
        # Busca el usuario por correo electrónico
        stmt = select(User).where(User.email == email)
        
        # Si el usuario no existe: 
            # retorna None
            # Si el usuario existe:
                # Verifica si la contraseña proporcionada coincide con la contraseña hasheada del usuario
                    # Si las contraseñas coinciden:
                        # retorna el usuario autenticado
                    # Si las contraseñas no coinciden:
                        # retorna None
        # Retorna el usuario autenticado o None si la autenticación falla